apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'


android {
    compileSdk 30

    defaultConfig {
        minSdk 21
        targetSdk 30
        versionCode 11
        versionName "1.0.10"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            buildConfigField("int", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String","VERSION_NAME","\"${defaultConfig.versionName}\"")

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            buildConfigField("int", "VERSION_CODE", "${defaultConfig.versionCode}")
            buildConfigField("String","VERSION_NAME","\"${defaultConfig.versionName}\"")
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

configurations {
    ugcConfig
}

dependencies {

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.3.0'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0"
    implementation 'androidx.webkit:webkit:1.4.0'

    implementation("com.github.inappstory:android-sdk:$inappstory_version") {
        transitive=true
    }
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

project.afterEvaluate {
    def isAndroidLibraryProject = project.plugins.hasPlugin('com.android.library')
    if(isAndroidLibraryProject) {
        task copyLibs(type: Copy) {
            from configurations.ugcConfig
            into "libs"
        }
        mergeReleaseJniLibFolders.dependsOn copyLibs

        task copyDeps(type:Copy) {
            from configurations.ugcConfig {
                include '**/*.jar'
            }
            into "./build/intermediates/packaged-classes/release/libs" // this folder gets packaged inside the AAR
        }
        mergeReleaseJniLibFolders.dependsOn copyDeps // only this stage worked for me - neither earlier, nor later

        task copyDebugDeps(type:Copy) {
            from configurations.ugcConfig {
                include '**/*.jar'
            }
            into "./build/intermediates/packaged-classes/debug/libs"
        }
        mergeDebugJniLibFolders.dependsOn copyDebugDeps
    }
}